import "../common/packet.poosl"

process class NetworkInterface (BufferCapacity: Integer, MyID: Integer, TransferDelay: Real)
// a model of a network interface
// Parameters:
//	BufferCapacity:	size of the input buffer from the node
//	MyID:			ID of the network interface
//	TransferDelay:	time it takes the NI to transfer a packet on the bus


ports
	Arbiter, Bus, Node

messages
	Arbiter?Grant(Integer),
	Arbiter!Release(),
	Arbiter!Request(Integer),
	Bus!Packet(Integer, Packet),
	Bus?Packet(Integer, Packet),
	Node!Packet(Packet),
	Node?Packet(Packet)

variables
	InputBuffer: Queue

init
	Initialise()()

methods

	Initialise()()
	// initialisation of the process
		// create a fifo queue for the input buffer
		InputBuffer := new(Queue) resize(BufferCapacity);
		
		// execute the three activities concurrently, the methods do not terminate
		par
			ReceiveFromNode()()
		and
			ForwardToBus()()
		and
			TransferBus2Node()()
		rap

	ForwardToBus()() 
	// Forward a packet in the input buffer to the bus whenever access is granted 
	|ID: Integer, p: Packet|
		// if there is a packet in the input buffer, send a request to the arbiter
		[InputBuffer isEmpty not] Arbiter!Request(MyID);
		// wait for the arbiter to grant the request 
		Arbiter?Grant(ID | ID = MyID) {
			// and immediately after that, take the packet from the buffer (but do not remove it yet)
			p := InputBuffer inspect};
		// delay to model the time it takes 
		delay(TransferDelay);
		// send the packet on the bus
		Bus!Packet(p getDestination, p);
		// now remove the packet from the input buffer, releasing the buffer space
		InputBuffer remove;
		// tell the arbiter that we no longer need the bus
		Arbiter!Release;
		// repeat this method forever
		ForwardToBus()()

	ReceiveFromNode()() 
	// Receive a packet from node and put it into the input buffer as long as the buffer is not full 
	|p: Packet|
		// if the input buffer is not full, receive a packet from the node
		[InputBuffer isFull not] Node?Packet(p) {
			// and immediately put it into the buffer, registering the time stamp when this happens
			InputBuffer add(p setEntranceTime(currentTime))};
		// repeat this method forever
		ReceiveFromNode()()
		
	TransferBus2Node()() |p: Packet, Destination: Integer|
	// Transfer a packet from the bus destined for this network interface directly to the corresponding node (without buffering!) 

		// receive a packet from the bus, only if it has the right ID		
		Bus?Packet(Destination, p | Destination = MyID);
		// forward the received packet to the node
		Node!Packet(p);
		// repeat this method forever
		TransferBus2Node()()
