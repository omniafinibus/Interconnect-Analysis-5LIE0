import "../../../common/Flit.poosl"
import "../../../libraries/distributions.poosl"

process class RandomUpStreamRouterDegree2Level1(ProcessingTime : Real, NodeY: Integer)

ports
	IT1, IT2,
	IB1, IB2,
	OT1, OT2,
	OB1, OB2

messages
	IT1?Flit(Flit)
	IT2?Flit(Flit)
	IB1?Flit(Flit)
	IB2?Flit(Flit)
	OT1!Flit(Flit)
	OT2!Flit(Flit)
	OB1!Flit(Flit)
	OB2!Flit(Flit)

variables
	RoutingDistribution: Distribution

init
	Initialise()()
	
methods
	Initialise()()
		RoutingDistribution := new(DiscreteUniform) withParameters(1, 2);
		TransferFlit()()
	TransferFlit()()
	|f: Flit, i: Integer, dest: Integer, childTerminalBase: Integer, childIndexInterval: Integer, busIndex1: Integer, busIndex2: Integer|//, busDegree: Integer|//, busDegree: Integer, nodeLevel: Integer|

		sel
			IB1?Flit(f)
		or
			IB2?Flit(f)
		or
			IT1?Flit(f)
		or
			IT2?Flit(f)
		les;

		delay(ProcessingTime);

		// busDegree := 2;
		// nodeLevel := 1;

		busIndex1 := 1;
		busIndex2 := 2;

		childTerminalBase := -1+NodeY*2-2;		//(NodeY-1-(1/busDegree))*busDegree^nodeLevel;
		childIndexInterval := 1;			//busDegree^(nodeLevel-1);

		dest := f getDestination();
		i := RoutingDistribution sample();

		// Check if any downward busses has access to the destination
		if (dest < (childTerminalBase + busIndex1*childIndexInterval)) | (dest > (childTerminalBase - 1 + (busIndex2+1)*childIndexInterval)) then
			// If not then send it upwards
			if i==1 then
				OT1!Flit(f)
			else if i==2 then
				OT2!Flit(f)
			fi fi
		// If it does, then check which bus contains the destinations
		else if dest == (childTerminalBase + busIndex1*childIndexInterval) then
			OB1!Flit(f)
		else if dest == (childTerminalBase + busIndex2*childIndexInterval) then
			OB2!Flit(f)
		fi fi fi;

		TransferFlit()()